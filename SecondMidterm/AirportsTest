package VtorKolokvium;
import java.util.*;
import java.util.stream.Collectors;

class Flights implements Comparable<Flights>
{
    String from;
    String to;
    int time;
    int duration;

    public Flights(String from, String to, int time, int duration) {
        this.from = from;
        this.to = to;
        this.time = time;
        this.duration = duration;
    }

    public String getFrom() {
        return from;
    }

    public String getTo() {
        return to;
    }

    public int getTime() {
        return time;
    }

    public int getDuration() {
        return duration;
    }

    @Override
    public int compareTo(Flights o) {
        return Comparator.comparing(Flights::getTo)
                .thenComparing(Flights::getTime)
                .thenComparing(Flights::getFrom)
                .compare(this,o);
    }

    @Override
    public String toString() {
        int end = time+duration;
        return String.format("%s-%s %02d:%02d-%02d:%02d %s%dh%02dm",
                from,to,time/60,time%60,(end/60)%24,end%60,(end/60)/24>0 ? "+1d " : "",
                duration/60,duration%60);
    }
}
class Airport
{
    String name;
    String country;
    String code;
    int passengers;
    Set<Flights> flights;

    public Airport(String name, String country, String code, int passengers) {
        this.name = name;
        this.country = country;
        this.code = code;
        this.passengers = passengers;
        this.flights = new TreeSet<>();
    }

    @Override
    public String toString() {
        return String.format("%s (%s)\n%s\n%d",name,code,country,passengers);
    }
}
class Airports
{

    Map<String,Airport> airportMap;

    public Airports()
    {
        this.airportMap = new HashMap<>();
    }

    public void addAirport(String name, String country, String code, int passengers) {
        airportMap.put(code,new Airport(name, country, code, passengers));
    }

    public void addFlights(String from, String to, int time, int duration) {
        airportMap.get(from).flights.add(new Flights(from, to, time, duration));
    }

    public void showFlightsFromAirport(String code) {
        System.out.println(airportMap.get(code));
        int i=1;
        for (Flights flights: airportMap.get(code).flights)
        {
            System.out.printf("%d. %s\n",i++,flights);
        }
    }

    public void showDirectFlightsFromTo(String from, String to) {
        List<Flights> list = airportMap.get(from).flights
                .stream()
                .filter(f->f.to.equals(to))
                .collect(Collectors.toList());
        if (list.isEmpty())
        {
            System.out.printf("No flights from %s to %s\n",from,to);
        }
        else {
            list.forEach(System.out::println);
        }
    }

    public void showDirectFlightsTo(String to) {
        Set<Flights> flightsSet = new TreeSet<>();
        flightsSet = airportMap.values()
                .stream()
                .flatMap(a->a.flights.stream())
                .filter(f->f.to.equals(to))
                .collect(Collectors.toCollection(TreeSet::new));
        flightsSet.forEach(System.out::println);
    }
}

public class AirportsTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Airports airports = new Airports();
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] codes = new String[n];
        for (int i = 0; i < n; ++i) {
            String al = scanner.nextLine();
            String[] parts = al.split(";");
            airports.addAirport(parts[0], parts[1], parts[2], Integer.parseInt(parts[3]));
            codes[i] = parts[2];
        }
        int nn = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < nn; ++i) {
            String fl = scanner.nextLine();
            String[] parts = fl.split(";");
            airports.addFlights(parts[0], parts[1], Integer.parseInt(parts[2]), Integer.parseInt(parts[3]));
        }
        int f = scanner.nextInt();
        int t = scanner.nextInt();
        String from = codes[f];
        String to = codes[t];
        System.out.printf("===== FLIGHTS FROM %S =====\n", from);
        airports.showFlightsFromAirport(from);
        System.out.printf("===== DIRECT FLIGHTS FROM %S TO %S =====\n", from, to);
        airports.showDirectFlightsFromTo(from, to);
        t += 5;
        t = t % n;
        to = codes[t];
        System.out.printf("===== DIRECT FLIGHTS TO %S =====\n", to);
        airports.showDirectFlightsTo(to);
    }
}



