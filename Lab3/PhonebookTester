package Lab3;
import java.io.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Random;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

class Contact implements Comparable<Contact>{
    private String name;
    private String[] phoneNumbers;

    public Contact(String name, String... phoneNumbers) throws InvalidNameException, InvalidNumberException, MaximumSizeExceddedException {
        this.name = name;
        this.phoneNumbers = new String[phoneNumbers.length];

        if (!checkName(name))
            throw new InvalidNameException(name);
        this.name = name;
        if (!Arrays.stream(phoneNumbers)
                .allMatch(this::checkNumber)) throw new InvalidNumberException();
        if (phoneNumbers.length > 5)
            throw new MaximumSizeExceddedException();
        IntStream.range(0, this.phoneNumbers.length)
                .forEach(i -> this.phoneNumbers[i] = phoneNumbers[i]);
    }

    public boolean checkName(String name) {
        return name.length() > 4 && name.length() < 10 && IntStream.range(0, name.length())
                .allMatch(i -> Character.isLetterOrDigit(name.charAt(i)));
    }

    public boolean checkNumber(String number) {
        return number.startsWith("07") && number.length() == 9
                && number.substring(2, 3).matches("[0125678]")
                && IntStream.range(0, number.length()).allMatch(
                i -> Character.isDigit(number.charAt(i)));
    }

    public String getName() {
        return name;
    }

    public String[] getNumbers() {
        return Arrays.stream(phoneNumbers).sorted().toArray(String[]::new);
    }

    public void addNumber(String phonenumber) throws InvalidNameException, InvalidNumberException, MaximumSizeExceddedException {
        if (!checkName(name))
            throw new InvalidNameException(name);
        if (!Arrays.stream(phoneNumbers)
                .allMatch(this::checkNumber)) throw new InvalidNumberException();
        if (phoneNumbers.length > 5)
            throw new MaximumSizeExceddedException();

        String[] temp = Arrays.copyOf(phoneNumbers, phonenumber.length() + 1);
        temp[phoneNumbers.length] = phonenumber;
        this.phoneNumbers = temp;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(name + "\n");
        sb.append(phoneNumbers.length + "\n");
        Arrays.sort(phoneNumbers);
        for (int i = 0; i < phoneNumbers.length; i++) {
            sb.append(phoneNumbers[i] + "\n");
        }
        return sb.toString();
    }

    public static Contact valueOf(String s) throws InvalidNumberException, InvalidNameException, MaximumSizeExceddedException, InvalidFormatException {
        String[] line = s.split("\n");
        String name = line[0];
        String[] numbers = new String[Integer.parseInt(line[1])];

        for (int i = 0; i < numbers.length; i++) {
            numbers[i] = line[i + 2];
        }
        Contact contact = null;
        try {
            contact = new Contact(name, numbers);
        } catch (Exception e) {
            throw new InvalidFormatException();
        }
        return contact;
    }

    @Override
    public int compareTo(Contact o) {
        return this.name.compareTo(o.name);
    }
}
class PhoneBook {
        private Contact[] contacts;

        public PhoneBook() {
            this.contacts = new Contact[0];
        }

        public void addContact(Contact contact) throws MaximumSizeExceddedException, InvalidNameException {
            if (contacts.length > 250) throw new MaximumSizeExceddedException();
            if (Arrays.stream(contacts).anyMatch(contact1 -> contact1.getName().equals(contact.getName())))
                throw new InvalidNameException(contact.getName());
            Contact[] temp = Arrays.copyOf(contacts, contacts.length + 1);
            temp[contacts.length] = contact;
            contacts = temp;
        }

        public boolean removeContact(String name) {
            if (Arrays.stream(contacts)
                    .anyMatch(contact -> !contact.getName().equals(name)))
                return false;
            this.contacts = Arrays.stream(contacts)
                    .filter(contact -> !contact.getName().equals(name))
                    .toArray(Contact[]::new);
            return true;
        }

        public int numberOfContacts() {
            return contacts.length;
        }

        public Contact[] getContacts() {
            return Arrays.stream(contacts)
                    .sorted(Comparator.comparing(Contact::getName))
                    .toArray(Contact[]::new);
        }

        public Contact getContactForName(String name) {
            return Arrays.stream(contacts).filter(
                    contact -> contact.getName().equals(name))
                    .findFirst()
                    .orElse(null);
        }

        @Override
        public String toString() {
            return Arrays.stream(getContacts())
                    .map(Contact::toString)
                    .collect(Collectors.joining("\n")) + "\n";
        }
        public static boolean saveAsTextFile(PhoneBook phonebook, String path) {
            PrintWriter printWriter = null;
            try {
                printWriter = new PrintWriter(new FileWriter(path));
                printWriter.print(phonebook);
                printWriter.flush();
                printWriter.close();
                return true;
            } catch (Exception e) {
                e.printStackTrace();
                return false;
            }
        }

        public static PhoneBook loadFromTextFile(String path) throws IOException, InvalidFormatException {
            BufferedReader br = new BufferedReader(new FileReader(path));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
            String s = sb.toString();
            String[] contact = s.split("\n\n");
            PhoneBook phoneBook = new PhoneBook();

            for (int i = 0; i < contact.length; i++) {
                try {
                    phoneBook.addContact(Contact.valueOf(contact[i]));
                } catch (Exception e) {
                    throw new InvalidFormatException();
                }
            }
            br.close();
            return phoneBook;
        }

        public Contact[] getContactsForNumber(String number_prefix) {
            return Arrays.stream(contacts)
                    .filter(contact -> IntStream.range(0, contact.getNumbers().length)
                            .anyMatch(i -> contact.getNumbers()[i].startsWith(number_prefix)))
                    .toArray(Contact[]::new);
        }
    }

     class InvalidNameException extends Exception {
        String name;
        public InvalidNameException(String name) {
            super();
            this.name = name;
        }
    }

    class InvalidNumberException extends Exception {
        public InvalidNumberException() {
            super();
        }
    }

     class MaximumSizeExceddedException extends Exception {
        public MaximumSizeExceddedException() {
            super();
        }
    }

     class InvalidFormatException extends Exception {
        public InvalidFormatException() {
            super();
        }
    }
    public class PhonebookTester {

        public static void main(String[] args) throws Exception {
            Scanner jin = new Scanner(System.in);
            String line = jin.nextLine();
            switch( line ) {
                case "test_contact":
                    testContact(jin);
                    break;
                case "test_phonebook_exceptions":
                    testPhonebookExceptions(jin);
                    break;
                case "test_usage":
                    testUsage(jin);
                    break;
            }
        }

        private static void testFile(Scanner jin) throws Exception {
            PhoneBook phonebook = new PhoneBook();
            while ( jin.hasNextLine() )
                phonebook.addContact(new Contact(jin.nextLine(),jin.nextLine().split("\\s++")));
            String text_file = "phonebook.txt";
            PhoneBook.saveAsTextFile(phonebook,text_file);
            PhoneBook pb = PhoneBook.loadFromTextFile(text_file);
            if ( ! pb.equals(phonebook) ) System.out.println("Your file saving and loading doesn't seem to work right");
            else System.out.println("Your file saving and loading works great. Good job!");
        }

        private static void testUsage(Scanner jin) throws Exception {
            PhoneBook phonebook = new PhoneBook();
            while ( jin.hasNextLine() ) {
                String command = jin.nextLine();
                switch ( command ) {
                    case "add":
                        phonebook.addContact(new Contact(jin.nextLine(),jin.nextLine().split("\\s++")));
                        break;
                    case "remove":
                        phonebook.removeContact(jin.nextLine());
                        break;
                    case "print":
                        System.out.println(phonebook.numberOfContacts());
                        System.out.println(Arrays.toString(phonebook.getContacts()));
                        System.out.println(phonebook.toString());
                        break;
                    case "get_name":
                        System.out.println(phonebook.getContactForName(jin.nextLine()));
                        break;
                    case "get_number":
                        System.out.println(Arrays.toString(phonebook.getContactsForNumber(jin.nextLine())));
                        break;
                }
            }
        }

        private static void testPhonebookExceptions(Scanner jin) {
            PhoneBook phonebook = new PhoneBook();
            boolean exception_thrown = false;
            try {
                while ( jin.hasNextLine() ) {
                    phonebook.addContact(new Contact(jin.nextLine()));
                }
            }
            catch ( InvalidNameException e ) {
                System.out.println(e.name);
                exception_thrown = true;
            }
            catch ( Exception e ) {}
            if ( ! exception_thrown ) System.out.println("Your addContact method doesn't throw InvalidNameException");
        /*
        exception_thrown = false;
        try {
        phonebook.addContact(new Contact(jin.nextLine()));
        } catch ( MaximumSizeExceddedException e ) {
            exception_thrown = true;
        }
        catch ( Exception e ) {}
        if ( ! exception_thrown ) System.out.println("Your addContact method doesn't throw MaximumSizeExcededException");
        */
        }

        private static void testContact(Scanner jin) throws Exception {
            boolean exception_thrown = true;
            String names_to_test[] = { "And\nrej","asd","AAAAAAAAAAAAAAAAAAAAAA","Ð�Ð½Ð´Ñ€ÐµÑ˜A123213","Andrej#","Andrej<3"};
            for ( String name : names_to_test ) {
                try {
                    new Contact(name);
                    exception_thrown = false;
                } catch (InvalidNameException e) {
                    exception_thrown = true;
                }
                if ( ! exception_thrown ) System.out.println("Your Contact constructor doesn't throw an InvalidNameException");
            }
            String numbers_to_test[] = { "+071718028","number","078asdasdasd","070asdqwe","070a56798","07045678a","123456789","074456798","073456798","079456798" };
            for ( String number : numbers_to_test ) {
                try {
                    new Contact("Andrej",number);
                    exception_thrown = false;
                } catch (InvalidNumberException e) {
                    exception_thrown = true;
                }
                if ( ! exception_thrown ) System.out.println("Your Contact constructor doesn't throw an InvalidNumberException");
            }
            String nums[] = new String[10];
            for ( int i = 0 ; i < nums.length ; ++i ) nums[i] = getRandomLegitNumber();
            try {
                new Contact("Andrej",nums);
                exception_thrown = false;
            } catch (MaximumSizeExceddedException e) {
                exception_thrown = true;
            }
            if ( ! exception_thrown ) System.out.println("Your Contact constructor doesn't throw a MaximumSizeExceddedException");
            Random rnd = new Random(5);
            Contact contact = new Contact("Andrej",getRandomLegitNumber(rnd),getRandomLegitNumber(rnd),getRandomLegitNumber(rnd));
            System.out.println(contact.getName());
            System.out.println(Arrays.toString(contact.getNumbers()));
            System.out.println(contact.toString());
            contact.addNumber(getRandomLegitNumber(rnd));
            System.out.println(Arrays.toString(contact.getNumbers()));
            System.out.println(contact.toString());
            contact.addNumber(getRandomLegitNumber(rnd));
            System.out.println(Arrays.toString(contact.getNumbers()));
            System.out.println(contact.toString());
        }

        static String[] legit_prefixes = {"070","071","072","075","076","077","078"};
        static Random rnd = new Random();

        private static String getRandomLegitNumber() {
            return getRandomLegitNumber(rnd);
        }

        private static String getRandomLegitNumber(Random rnd) {
            StringBuilder sb = new StringBuilder(legit_prefixes[rnd.nextInt(legit_prefixes.length)]);
            for ( int i = 3 ; i < 9 ; ++i )
                sb.append(rnd.nextInt(10));
            return sb.toString();
        }


    }
